name: Release

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/**'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.version-check.outputs.should_release }}
      new_version: ${{ steps.version-check.outputs.new_version }}
      version_type: ${{ steps.version-check.outputs.version_type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check for version bump
        id: version-check
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Latest commit: $COMMIT_MSG"
          
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Determine version type based on commit message or manual input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
          else
            if echo "$COMMIT_MSG" | grep -q "^BREAK:"; then
              VERSION_TYPE="major"
            elif echo "$COMMIT_MSG" | grep -q "^NEW:"; then
              VERSION_TYPE="minor"
            elif echo "$COMMIT_MSG" | grep -q "^OPT:\|^FIX:"; then
              VERSION_TYPE="patch"
            else
              VERSION_TYPE="none"
            fi
          fi
          
          echo "Version type: $VERSION_TYPE"
          
          if [ "$VERSION_TYPE" != "none" ]; then
            # Calculate new version
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case $VERSION_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "New version: $NEW_VERSION"
            
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "No version bump needed for this commit"
          fi

  test:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Run security audit
        run: npm run security:check

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    needs: [check-version, test]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

  release:
    needs: [check-version, test, build]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update version in package.json
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.new_version }}"
          npm version $NEW_VERSION --no-git-tag-version
          git add package.json
          git commit -m "chore: bump version to v$NEW_VERSION"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Create archive
        run: |
          tar -czf mjson-v${{ needs.check-version.outputs.new_version }}.tar.gz dist/

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create changelog
          echo "## Changes in v${{ needs.check-version.outputs.new_version }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          if [ -n "$COMMITS" ]; then
            echo "$COMMITS" >> CHANGELOG.md
          else
            echo "- No significant changes" >> CHANGELOG.md
          fi
          
          # Set output for release notes
          {
            echo 'changelog<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git tag -a "v${{ needs.check-version.outputs.new_version }}" -m "Release v${{ needs.check-version.outputs.new_version }}"
          git push origin "v${{ needs.check-version.outputs.new_version }}"

      - name: Push version bump
        run: |
          git push origin main

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new_version }}
          name: JSON Formatter v${{ needs.check-version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: mjson-v${{ needs.check-version.outputs.new_version }}.tar.gz

  deploy:
    needs: [check-version, release]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.check-version.outputs.new_version }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ vars.VPS_IP_ADDRESS }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          # Create deployment directory if it doesn't exist
          ssh debnath.mukul@${{ vars.VPS_IP_ADDRESS }} "mkdir -p /home/debnath.mukul/mjson"

          # Copy files to server (excluding unnecessary files)
          rsync -avz --exclude='.git' --exclude='node_modules' --exclude='.github' --exclude='coverage' --exclude='*.log' --exclude='.env*' . debnath.mukul@${{ vars.VPS_IP_ADDRESS }}:/home/debnath.mukul/mjson/

          # Deploy on server
          ssh debnath.mukul@${{ vars.VPS_IP_ADDRESS }} "cd /home/debnath.mukul/mjson && docker compose -f docker-compose.prod.yml down && docker compose -f docker-compose.prod.yml pull && docker compose -f docker-compose.prod.yml up -d --build"

      - name: Verify deployment
        run: |
          ssh debnath.mukul@${{ vars.VPS_IP_ADDRESS }} "cd /home/debnath.mukul/mjson && docker compose -f docker-compose.prod.yml ps"

      - name: Post-deployment notification
        run: |
          echo "ðŸš€ JSON Formatter v${{ needs.check-version.outputs.new_version }} has been successfully deployed!"
          echo "ðŸ”— Application is available at your configured domain"